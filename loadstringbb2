local OrionLib = loadstring(game:HttpGet('https://raw.githubusercontent.com/FabsKebabs/load/refs/heads/main/Source'))()

if not OrionLib then
    warn("OrionLib failed to load!")
    return
end

local success, errorMessage = pcall(function()
    local Window = OrionLib:MakeWindow({
        Name = [[<font color="rgb(255, 165, 0)">Publoader-Blade Ball</font>]],
        HidePremium = false,
        SaveConfig = true,
        ConfigFolder = "Pubzy_Configs",
        BackgroundColor = Color3.fromRGB(35, 35, 35),
        TitleColor = Color3.fromRGB(255, 165, 0),
    })

    local mainTab = Window:MakeTab({
        Name = "Main",
        PremiumOnly = false,
    })

    local playerConfigTab = Window:MakeTab({
        Name = "Player Config",
        PremiumOnly = false,
    })

    local parrySettingsTab = Window:MakeTab({
        Name = "Parry Settings",
        PremiumOnly = false,
    })

    -- Default Auto Parry Settings
    local parryDistance = 0.38
    local parrySpeed = 20

    -- Auto Parry Button
    mainTab:AddButton({
        Name = "Auto Parry",
        Callback = function()
            print("Auto Parry Enabled!")
            local autoParryScript = loadstring(game:HttpGet("https://raw.githubusercontent.com/FabsKebabs/bbspbzyd/refs/heads/main/bbsv3"))()

            -- Pass parameters to Auto Parry script
            autoParryScript.SetParryDistance(parryDistance)
            autoParryScript.SetParrySpeed(parrySpeed)

            OrionLib:MakeNotification({
                Name = "Auto Parry",
                Content = "Auto Parry Enabled!",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end,
    })

    -- Respawn Button
    mainTab:AddButton({
        Name = "Respawn",
        Callback = function()
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            character:BreakJoints()
            print("Respawned the character!")
            OrionLib:MakeNotification({
                Name = "Respawn",
                Content = "Your character has been respawned!",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end,
    })

    -- Text
    mainTab:AddLabel("Make sure to set Auto Parry Settings FIRST Before Enabling")

    -- Walkspeed Slider
    playerConfigTab:AddSlider({
        Name = "Walkspeed",
        Min = 30,
        Max = 50,
        Default = 30,
        Color = Color3.fromRGB(255, 165, 0),
        Increment = 1,
        Callback = function(value)
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
            print("Walkspeed set to: " .. value)
        end,
    })

    -- FOV Slider
    playerConfigTab:AddSlider({
        Name = "Field of View",
        Min = 70,
        Max = 120,
        Default = 70,
        Color = Color3.fromRGB(255, 165, 0),
        Increment = 1,
        Callback = function(value)
            game:GetService("Workspace").CurrentCamera.FieldOfView = value
            print("FOV set to: " .. value)
        end,
    })

    -- Parry Distance Slider
    parrySettingsTab:AddSlider({
        Name = "Parry Distance",
        Min = 0.25,  -- Updated minimum value
        Max = 2.0,
        Default = parryDistance,
        Color = Color3.fromRGB(255, 165, 0),
        Increment = 0.05,
        Callback = function(value)
            parryDistance = value
            print("Parry Distance set to: " .. value)
        end,
    })

    -- Parry Speed Slider
    parrySettingsTab:AddSlider({
        Name = "Parry Speed",
        Min = 15,
        Max = 100,
        Default = parrySpeed,
        Color = Color3.fromRGB(255, 165, 0),
        Increment = 1,
        Callback = function(value)
            parrySpeed = value
            print("Parry Speed set to: " .. value)
        end,
    })

    -- Dropdown for Camera Lock (with player usernames)
    local cameraLockEnabled = false
    local targetPlayer = nil
    local playerList = {}

    -- Create a list of players in the game
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            table.insert(playerList, player.Name)
        end
    end

    parrySettingsTab:AddDropdown({
        Name = "Player Target (Select Player)",
        Options = playerList,
        Default = 1,
        Callback = function(selectedPlayer)
            -- Find the selected player by username
            targetPlayer = game.Players:FindFirstChild(selectedPlayer)

            if targetPlayer then
                cameraLockEnabled = true
                print("Camera Lock enabled on player: " .. selectedPlayer)
            else
                cameraLockEnabled = false
                print("Camera Lock disabled.")
            end
        end,
    })

    -- Camera Lock Code
    local userInputService = game:GetService("UserInputService")
    local camera = game:GetService("Workspace").CurrentCamera
    local playerCharacter = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()

    -- Function to track target's movements without changing camera position
    local function trackTargetMovement()
        if cameraLockEnabled and targetPlayer then
            local targetCharacter = targetPlayer.Character
            if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                local targetPosition = targetCharacter.HumanoidRootPart.Position

                -- Keep the camera locked to a fixed height above the ground (cameraHeightOffset)
                local cameraPosition = camera.CFrame.Position
                local newCameraPosition = Vector3.new(cameraPosition.X, targetPosition.Y + 5, cameraPosition.Z)

                -- Camera does not move, just updates the direction it's facing
                local directionToTarget = targetPosition - newCameraPosition
                local lookAtPosition = targetPosition + Vector3.new(0, 5, 0)  -- Adjust this to give a slight vertical offset if needed

                -- Update the camera's CFrame to face the target's direction and lock the camera position
                camera.CFrame = CFrame.new(newCameraPosition, lookAtPosition)
            end
        end
    end

   -- Monitor the target player's health
    local function monitorPlayerHealth()
        if cameraLockEnabled and targetPlayer then
            local humanoid = targetPlayer.Character and targetPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.HealthChanged:Connect(function()
                    if humanoid.Health <= 0 then
                        cameraLockEnabled = false
                        targetPlayer = nil
                        print("Target player is dead. Camera Lock disabled.")
                    end
                end)
            end
        end
    end

    -- Detect when the "C" key is pressed to stop the lock
    userInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end

        if input.KeyCode == Enum.KeyCode.C then
            -- Stop the lock when "C" is pressed
            cameraLockEnabled = false
            targetPlayer = nil
            print("Camera Lock disabled.")
        end
    end)

    -- Run the tracking function every frame to update camera view
    game:GetService("RunService").RenderStepped:Connect(trackTargetMovement)

end)

if not success then
    warn("Error creating window: " .. errorMessage)
end
